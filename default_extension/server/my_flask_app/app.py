from flask import Flask, render_template, send_from_directory
import base64
import io
import json
import logging
import boto3
from PIL import Image
import os
from io import BytesIO
import random
import string

from botocore.exceptions import ClientError

class ImageError(Exception):
    "Custom exception for errors returned by SDXL"
    def __init__(self, message):
        self.message = message

logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO)

def generate_image(model_id, body):
    """
    Generate an image using SDXL 1.0 on demand.
    Args:
        model_id (str): The model ID to use.
        body (str) : The request body to use.
    Returns:
        image_bytes (bytes): The image generated by the model.
    """

    logger.info("Generating image with SDXL model %s", model_id)

    bedrock = boto3.client(service_name='bedrock-runtime')
   
    accept = "application/json"
    content_type = "application/json"

    response = bedrock.invoke_model(
        body=body, modelId=model_id, accept=accept, contentType=content_type
    )
    response_body = json.loads(response.get("body").read())
    print(response_body['result'])

    base64_image = response_body.get("artifacts")[0].get("base64")
    base64_bytes = base64_image.encode('ascii')
    image_bytes = base64.b64decode(base64_bytes)

    finish_reason = response_body.get("artifacts")[0].get("finishReason")

    if finish_reason == 'ERROR' or finish_reason == 'CONTENT_FILTERED':
        raise ImageError(f"Image generation error. Error code is {finish_reason}")


    logger.info("Successfully generated image withvthe SDXL 1.0 model %s", model_id)

    return image_bytes


app = Flask(__name__)
app.config['IMG_PATH'] = 'gen_imgs'

@app.route('/')
def home():
    return render_template('index.html', promptgen=False)

@app.route("/uploads/<filename>")
def upload(filename):
  return send_from_directory(app.config['IMG_PATH'], filename)

@app.route('/<prompt>')
def home_prompt(prompt):
    model_id='stability.stable-diffusion-xl-v1'
    body=json.dumps({
        "text_prompts": [
        {
        "text": prompt
        }
    ],
    "cfg_scale": 10,
    "seed": random.randint(0, 2048),
    "steps": 50,
    "samples" : 1,
    "style_preset" : "photographic"

    })

    try:
        image_bytes=generate_image(model_id = model_id,
                                 body = body)
        
        img_id = ''.join(random.choices(string.ascii_uppercase +
                             string.digits, k=8))
        
        file_path = app.config['IMG_PATH'] + '/' + img_id + '.png'
        
        with open(file_path, 'wb') as f:
            f.write(image_bytes)
        
        #image = Image.open(io.BytesIO(image_bytes))
        #image.show()


    except ClientError as err:
        message=err.response["Error"]["Message"]
        logger.error("A client error occurred: %s", message)
        print("A client error occured: " +
              format(message))
    except ImageError as err:
        logger.error(err.message)
        print(err.message)

    else:
        print(f"Finished generating text with SDXL model {model_id}.")

    return render_template('index.html', promptGen=True, path=file_path[len(app.config['IMG_PATH']):])

if __name__ == '__main__':
    # PUT YOUR OS.ENVIRON HERE FOR AWS CREDENTIALS!
    # os.environ[...] = ...
    # os.environ[...] = ... etc
    # Should be 4 of them, cannot push due to secrets
    app.run(debug=False, port=1601)